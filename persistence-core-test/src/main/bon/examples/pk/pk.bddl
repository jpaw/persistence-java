import examples.pkey.*

@Generator(noMapper)
package examples.pkey.entities owner scott prefix pkey {
    grants rw {
        demorole: SELECT,INSERT,UPDATE,DELETE;
    }
    category tests {
        tablenamepattern "tx_(entity)" dropSuffix "entity"
        grants rw
    }

    // category which requires a primary key - example shows that this can be defined in a subclass
    category tpk {

    }

    embeddable EKeyEntity is EKey {}

    // example of an entity without a primary key
    entity NoPkEntity category tests is EDto {
    }

    // example of an entity with a single field primary key of type String
    entity OneFieldPkEntity category tests is EDto {
        pk (data)
    }

    // example of an entity with a multi field primary key - this defines an implicit embeddable
    entity MultiFieldPkEntity category tests is EDto2 {
        pk (key1, key2)
    }

    // example of an entity with an explicit embeddable primary key
    entity EmbeddedPkEntity category tests is EDto {
        @Embeddable EKeyEntity for myCompositeKey is pk
    }

    // example of an entity with a multi field primary key - usind an ID class
    entity IdClassPkEntity category tests is EDto2 {
        pk is EKey
    }

    // example of an entity with a single field primary key - autogenerated
    entity StdOneFieldPk1Entity category tests is StandardJava {
        pk (myKey) generated
    }

    // example of an entity with a single field primary key - autogenerated
    entity StdOneFieldPk2Entity category tests is StandardJava {
        pk (myKey) generated = "strategy=GenerationType.AUTO"
    }

    // example of an entity using a superclass as primary key
    entity CustomerEntity category tests is Customer {
        pk is CustomerKey
    }



    // class hierarchy examples - simple

    // superclass with no PK
    abstract entity AbstractSuperEntity category tpk is BaseClass {
        // defines no PK - is a mapped superclass
    }

    // class is abstract but defines the PK
    abstract entity AbstractSubClass is SubClass1 inherits AbstractSuperEntity {
        pk (key)
    }

    entity ConcreteSubClass is SubClass2 inherits AbstractSubClass {
        // uses inherited PK
    }



    // class hierarchy examples - with mixed in tenant discriminators

    // superclass with no PK
    abstract entity AbstractSuperTenant category tpk is BaseClass {
        tenantClass ExplicitSeparateTenantClass
    }

    // class is abstract but defines the PK
    abstract entity AbstractSubClass2 is SubClass1 inherits AbstractSuperTenant {
        pk (tenantId, key)
    }

    entity ConcreteSubClass2 is SubClass2 inherits AbstractSubClass2 {
        // uses inherited PK which is composed of a DTO field and the tenant discriminator
    }

}
